#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// これらの行は、既にコメントアウトされているため問題ありませんが、
// もし uncomment する場合は、ergonaut_one_left.overlay から削除済みであることを確認してください。
// #define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/pointing.h>

#define QWE 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define MOV 4
#define NUM 5
#define BLE 6
#define NIC 7

&lt {
    quick-tap-ms = <150>;
};

&mt {
    quick-tap-ms = <150>;
};

/ { // ここが唯一のルートノードの始まり
    combos {
        compatible = "zmk,combos";
        combo_WO {
            timeout-ms = <50>;
            key-positions = <13 37>;
            layers = <7>;
            bindings = <&macro_WO>;
        };
        combo_VU {
            timeout-ms = <50>;
            key-positions = <13 40>;
            layers = <7>;
            bindings = <&macro_VU>;
        };
        combo_U {
            timeout-ms = <50>;
            key-positions = <13 41>;
            layers = <7>;
            bindings = <&macro_U>;
        };
    }; // combos ノードの閉じ括弧の後にセミコロンが必要

    // ***** ここからが重要: 余分な "/ {" を削除し、既存のルートノード内で定義を続ける *****
    macro_LANG1: macro_LANG1 {
        compatible = "zmk,behavior-macro";
        label = "macro_LANG1;
        #binding-cells = <0>;
        bindings = <&kp LANG1>, <&tog 7>;
    }; // 各マクロノードの閉じ括弧の後にセミコロンが必要

    macro_U: macro_U {
        compatible = "zmk,behavior-macro";
        label = "macro_U";
        #binding-cells = <0>;
        bindings = <&kp U>;
    };

    macro_WO: macro_WO {
        compatible = "zmk,behavior-macro";
        label = "macro_WO";
        #binding-cells = <0>;
        bindings = <&kp W>, <&kp O>;
    };

    macro_VU: macro_VU {
        compatible = "zmk,behavior-macro";
        label = "macro_VU";
        #binding-cells = <0>;
        bindings = <&kp V>, <&kp U>;
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <LWR RSE>;
            then-layer = <ADJ>;
        };
    }; // conditional_layers の閉じ括弧の後にセミコロンが必要

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWER";
            bindings = <
                &mt LSHFT ESC     &kp Q   &kp W   &kp E         &kp R             &kp T         &kp Y         &kp U            &kp I         &kp O     &kp P      &mt RSHFT MINUS
                &mt LCTRL TAB     &kp A   &kp S   &kp D         &kp F             &kp G         &kp H         &kp J            &kp K         &kp L     &kp SEMI   &mt RCTRL SQT
                &kp LGUI          &kp Z   &kp X   &kp C         &kp V             &kp B         &kp N         &kp M            &kp COMMA     &kp DOT   &kp FSLH   &kp RALT
                                                  &lt NUM LANG2 &kp SPACE         &mo LWR       &lt RSE ENTER &kp INT4         &lt MOV LANG1
            >;
        };
        lower_layer {
            display-name = "LWR";
            bindings = <
                &trans           &kp PG_UP  &kp HOME     &kp UP        &kp END    &mkp MB3    &kp DEL     &msc SCRL_LEFT &mmv MOVE_UP   &msc SCRL_RIGHT   &msc SCRL_UP   &kp LG(X)           
                &trans           &kp PG_DN  &kp LEFT     &kp DOWN      &kp RIGHT  &mkp MB1    &kp BSPC    &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT   &msc SCRL_DOWN &kp LG(C)
                &trans           &kp LC(V)  &mkp MB1     &mkp MB3      &mkp MB2   &mkp MB2    &mkp MB1    &kp ENTER      &kp LC(LEFT)   &kp LC(RIGHT)     &kp LG(V)      &trans
                                                         &caps_word    &kp INT5   &trans      &trans      &kp LS(LC(V))  &kp RSHFT
            >;
        };

        raise_layer {
            display-name = "RSE";
            bindings = <
                &trans            &kp F1            &kp F2      &kp F3      &kp F4      &kp F5         &kp F6         &kp F7       &kp F8      &kp F9      &kp F10           &kp LC(X)
                &mt LCTRL TILDE   &kp N1            &kp N2      &kp N3      &kp N4      &kp N5         &kp N6         &kp N7       &kp N8      &kp N9      &kp N0            &kp LC(C)
                &trans            &kp INT1          &kp BSLH    &kp INT3    &kp SLASH   &kp ASTRK      &kp MINUS      &kp PLUS     &kp LBKT    &kp RBKT    &kp LC(V)         &trans
                                                                &kp LSHFT   &kp SPACE   &trans         &trans         &macro_LANG1 &caps_word
            >;
        };
        adjust_layer {
            display-name = "ADJ";
            bindings = <
                &trans            &kp F11        &kp F12        &kp C_MUTE        &kp C_VOL_DN   &kp C_VOL_UP   &kp CAPS       &kp PSCRN      &kp SLCK         &kp PAUSE_BREAK   &kp LS(UP)     &mt RSHFT INS
                &mt LCTRL LANG5   &out OUT_BLE   &out OUT_USB   &none             &kp LS(RIGHT)  &kp G          &kp INT5       &kp LS(LC(F6)) &kp LS(F5)       &kp LS(F6)        &kp LC(F6)     &kp RCTRL
                &kp LGUI          &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2      &kp K_APP      &kp LS(LEFT)   &kp LS(DOWN)   &kp LS(HOME)   &kp LS(LC(LEFT)) &kp LS(LC(RIGHT)) &kp LS(END)    &trans
                                                                &trans            &kp LS(LEFT)   &trans         &trans         &kp LS(RIGHT)  &trans
            >;
        };
        move_layer {
            display-name = "MOV";
            bindings = <
                &kp LG(BSPC)      &kp LC(PG_UP)     &msc SCRL_LEFT  &mmv MOVE_UP   &msc SCRL_RIGHT   &msc SCRL_UP       &kp LC(Y)      &kp HOME         &kp UP        &kp END        &kp PG_UP    &kp ESC
                &trans            &mkp MB1          &mmv MOVE_LEFT  &mmv MOVE_DOWN &mmv MOVE_RIGHT   &msc SCRL_DOWN     &lt BLE BSPC   &kp LEFT         &kp DOWN      &kp RIGHT      &kp PG_DN    &mkp MB2
                &mt LGUI SPACE    &kp W             &kp LA(LEFT)    &mkp MB3       &kp LA(RIGHT)     &kp LC(PG_DN)      &kp LC(Z)      &kp LS(LC(TAB))  &kp LG(LBKT)  &kp LG(RBKT)   &kp LC(TAB)  &trans
                                                                    &kp LC(C)      &kp LC(V)         &mkp MB2           &kp ENTER      &mkp MB1         &trans
            >;
        };
        numpad_layer {
            display-name = "NUM";
            bindings = <
                &trans            &kp PG_UP     &kp HOME      &kp UP        &kp END         &kp CARET         &kp KP_SLASH    &kp KP_N7   &kp KP_N8   &kp KP_N9     &kp KP_N0         &kp KP_NLCK
                &mt LCTRL F4      &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT       &lt BLE DEL       &kp BSPC        &kp KP_N4   &kp KP_N5   &kp KP_N6     &kp KP_MINUS      &kp KP_DOT
                &mt LGUI N0       &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)    &kp LA(RIGHT)   &kp EQUAL         &kp KP_MULTIPLY &kp KP_N1   &kp KP_N2   &kp KP_N3     &kp KP_PLUS       &trans
                                                              &trans        &kp LS(F5)      &kp LS(F6)        &kp KP_ENTER    &kp UNDER   &kp SPACE
            >;
        };
        bluetooth_layer {
            display-name = "BLE";
            bindings = <
                &soft_off      &bt BT_DISC 0     &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3   &bt BT_CLR_ALL  &bt BT_CLR_ALL &bt BT_DISC 4   &bt BT_DISC 5 &bt BT_DISC 6 &bt BT_DISC 7 &soft_off
                &kp LC(LG(H))  &kp LC(LG(T))     &kp LC(LG(C))  &kp LC(LG(P))  &kp LC(LG(G))   &trans          &trans         &kp LC(LG(E))   &kp LC(LG(A)) &kp LC(LG(L)) &kp LC(LG(X)) &kp LC(LG(W))
                &sys_reset     &bt BT_SEL 0      &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3    &bootloader     &bootloader    &bt BT_SEL 4    &bt BT_SEL 5  &bt BT_SEL 6  &bt BT_SEL 7  &sys_reset
                                                                &trans         &kp LS(LG(F23)) &bt BT_CLR      &bt BT_CLR     &kp LA(LG(G))   &trans
            >;
        };
        nicola_layer {
            display-name = "NIC";
            bindings = <
                &trans        &none           &none           &none          &none          &none          &none          &none          &none          &none          &none            &none
                &trans        &macro_U        &none           &none          &none          &none          &none          &none          &none          &none          &none            &none
                &trans        &none           &none           &none          &none          &none          &none          &none          &none          &none          &none            &none
                                                              &trans         &trans         &trans         &trans         &trans         &trans
            >;
        };
    }; // keymap ノードの閉じ括弧の後にセミコロンは不要 (最後の要素なので)
}; // ルートノード / の閉じ括弧
